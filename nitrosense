#!/bin/bash

if [ $# -le 0 ]; then
	echo "PWR: [q]uiet [d]efault [p]erformance"
	echo "FAN: [a]uto  [c]ustom  [m]ax"
	echo "DBG: [r]ead from ec"
	echo "DBG: [e]nergy data from intel_rapl"
	echo "DBG: [n]vidia-powerd restart"
	echo "[b]attery charging limit:"
	echo "	- [0] - off (100%)"
	echo "	- [1] - on (80%)"
	echo "keyboard backlight leve[l]:"
	echo "	- [0] - 0%"
	echo "	- [1] - 25%"
	echo "	- [2] - 50%"
	echo "	- [3] - 75%"
	echo "	- [4] - 100%"
	echo "keyboard backlight c[o]lor:"
	echo "	- [0] - All zone"
	echo "	- [1] - Per zone"
	echo "	- [2] - Dynamic color"
	echo "[k]eyboard backlight mode:"
	echo "	- [0] Static"
	echo "	- [1] Breathing (Dynamic color need to be set)"
	echo "	- [2] Wave"
	echo "	- [3] Neon"
	echo "	- [4] Shifting (Dynamic color need to be set)"
	echo "	- [5] Zoom (Dynamic color need to be set)"
	echo "[w]indows and menu key lock:"
	echo "	- [0] - off"
	echo "	- [1] - on"
	echo "Power-off [u]sb charging:"
	echo "	- [0] - off"
	echo "	- [1] - on"
	echo "Keyboard backlight timeou[t]"
	echo "	- [0] - off"
	echo "	- [1] - on"
	echo "Read Fan Speed [z]"
	echo "Read Temp [y]"
	echo "Read charging [w]"
	exit
fi

echo on | tee /sys/module/msr/parameters/allow_writes &>/dev/null

# Reload ec_sys with write_support
 modprobe -r ec_sys
 modprobe ec_sys write_support=1

EC=/sys/kernel/debug/ec/ec0/io # EC Location

if [[ $* =~ "r" ]]; then # Read EC
	if [[ $( ls $EC 2>/dev/null) ]]; then
		 xxd -g1 $EC
	fi
fi

if [[ $* =~ "e" ]]; then
	find /sys/devices/virtual/powercap -type f -iname "energy_uj" -print -exec bash -c " cat {}" \;
fi

function ecw() {
	# shellcheck disable=SC2059
	echo -n -e "$2" |  dd of=$EC bs=1 seek="$1" count=1 conv=notrunc &>/dev/null
}

function set_power_limits() {
	MSR=/sys/devices/virtual/powercap/intel-rapl/intel-rapl:0
	MCH=/sys/devices/virtual/powercap/intel-rapl-mmio/intel-rapl-mmio:0
	for N in "$MSR" "$MCH"; do
		echo "${1}000000" | tee "$N/constraint_0_power_limit_uw" &>/dev/null
		echo "${2}000000" | tee "$N/constraint_1_power_limit_uw" &>/dev/null
		echo "128000000"  | tee "$N/constraint_0_time_window_us" &>/dev/null
		echo "128000000"  | tee "$N/constraint_1_time_window_us" &>/dev/null
		[[ "$N" == "$MSR" ]] && NODE=MSR || NODE=MCH
		echo "[$NODE] PL1 [$(cat "$N/constraint_0_power_limit_uw") $(cat "$N/constraint_0_time_window_us")] PL2 [$(cat "$N/constraint_1_power_limit_uw") $(cat "$N/constraint_1_time_window_us")]"
	done
}

# Sometimes, EC Cannot be written. To trigger write mode, use this
LMT=\\x$(xxd -g1 -seek $((0x03)) -l 2 $EC | cut -b 11-13)
ecw $((0x03)) "$LMT" # Set Battery charge to 80% or 100% depends on last setting (trigger write enable)

if [[ $( ls $EC 2>/dev/null) ]]; then
	if [[ $* =~ "b" ]]; then
		if [ -z "$2" ]; then
			echo "Specify Charging Limit Mode as Second arg (0 = Off, 1 = On)"
		else
			if [[ $2 =~ "0" ]]; then
				echo "Battery Charging Limit (80%) - OFF"
				BAT="\x11"
			elif [[ $2 =~ "1" ]]; then
				echo "Battery Charging Limit (80%) - ON"
				BAT="\x51"
			fi
			ecw $((0x03)) "$BAT" # 11 51: 80% 100% limit charge
		fi
	fi
	if [[ $* =~ "l" ]]; then
		if [ -z "$2" ]; then
			echo "Specify Keyboard Backlight Level as Second arg (0 Off, 1, 2, 3, 4 On)"
		else
			if [[ $2 =~ "0" ]]; then
				echo "Keyboard Backlight - OFF (0%)"
				KBD="\x00"
			elif [[ $2 =~ "1" ]]; then
				echo "Keyboard Backlight - ON (25%)"
				KBD="\x19"
			elif [[ $2 =~ "2" ]]; then
				echo "Keyboard Backlight - ON (50%)"
				KBD="\x32"
			elif [[ $2 =~ "3" ]]; then
				echo "Keyboard Backlight - ON (75%)"
				KBD="\x4B"
			elif [[ $2 =~ "4" ]]; then
				echo "Keyboard Backlight - ON (100%)"
				KBD="\x64"
			fi
			ecw "$((0x19))" "$KBD" # 00 64: 0% - 100% Keyboard backlight (step 25%)
		fi
	fi
	if [[ $* =~ "q" ]]; then
		echo "PWR - Quiet"
		ecw $((0x2c)) '\x00' # 00 01 04 PWR: quiet default perf
		ecw $((0x2d)) '\x04' # 04 05 PWR
		set_power_limits 10 15
	fi
	if [[ $* =~ "d" ]]; then
		echo "PWR - Default"
		ecw $((0x2c)) '\x01' # 00 01 04 PWR: quiet default perf
		ecw $((0x2d)) '\x04' # 04 05 PWR
		set_power_limits 45 75
	fi
	if [[ $* =~ "p" ]]; then
		echo "PWR - Performance"
		ecw $((0x2c)) '\x04' # 00 01 04 PWR: quiet default perf
		ecw $((0x2d)) '\x04' # 04 05 PWR
		set_power_limits 75 95
	fi
	if [[ $* =~ "n" ]]; then
		echo "PWR - nvidia-powerd restart"
		 systemctl restart nvidia-powerd
	fi
	if [[ $* =~ "a" ]]; then
		echo "FAN - Auto"
		ecw $((0x21)) '\x10' # 10 20 30 GPUF: auto max cust
		ecw $((0x22)) '\x04' # 04 08 0c CPUF: auto max cust
	fi
	if [[ $* =~ "c" ]]; then
		if [ -z "$2" ]; then
			echo "Specify FAN Percentage as Second arg (CPU FAN) and Third arg (GPU FAN)"
		else
			CPCT="\x$(printf %x "$2")"
			GPCT="\x$(printf %x "$3")"
			echo "CPU FAN - Custom ($2%)"
			echo "GPU FAN - Custom ($3%)"
			ecw $((0x21)) '\x30' # 10 20 30 GPUF: auto max cust
			ecw $((0x22)) '\x0c' # 04 08 0c CPUF: auto max cust
			ecw $((0x37)) "$CPCT" # 32 64 CPUF PCT: 0-100%
			ecw $((0x3a)) "$GPCT" # 32 64 GPUF PCT: 0-100%
		fi
	fi
	if [[ $* =~ "m" ]]; then
		echo "FAN - Max"
		ecw $((0x21)) '\x20' # 10 20 30 GPUF: auto max cust
		ecw $((0x22)) '\x08' # 04 08 0c CPUF: auto max cust
	fi
	if [[ $* =~ "w" ]]; then # Windows and Menu Key Lock (On Gnome, detected as Play / Pause Media Button)
		if [[ $2 =~ "0" ]]; then
			echo "Windows and Menu Key Lock - OFF"
			WML="\x01"
		elif [[ $2 =~ "1" ]]; then
			echo "Windows and Menu Key Lock - ON"
			WML="\x81"
		fi
		ecw $((0x30)) "$WML"
	fi
	if [[ $* =~ "k" ]]; then # Keyboard Backlight Mode
	# 24 (0x18) default to 00, 01 - 09 speed incremental
	# 27 (0x1b) default to 00, 01 = to left, 02 = to right

		if [[ $2 =~ "0" ]]; then # Static Mode
			echo "Keyboard Backlight Mode: Static"
			ecw $((0x17)) '\x00' # Static Mode
			ecw $((0x18)) '\x00' # No Speed (Static)
			ecw $((0x1b)) '\x00' # No Direction (Static)
		elif [[ $2 =~ "1" ]]; then # Breathing Mode (Dynamic Keyboard Color need to be set)
			echo "Keyboard Backlight Mode: Breathing"
			ecw $((0x17)) '\x01' # Breathing Mode
			ecw $((0x18)) '\x01' # Speed 1
		elif [[ $2 =~ "2" ]]; then # Wave Mode
			echo "Keyboard Backlight Mode: Wave"
			ecw $((0x17)) '\x02' # Wave Mode
			ecw $((0x18)) '\x01' # Speed 1
		elif [[ $2 =~ "3" ]]; then # Neon Mode
			echo "Keyboard Backlight Mode: Neon"
			ecw $((0x17)) '\x03' # Neon Mode
			ecw $((0x18)) '\x01' # Speed 1
			ecw $((0x1b)) '\x01' # Direction to Right?
		elif [[ $2 =~ "4" ]]; then # Shifting Mode (Dynamic Keyboard Color need to be set)
			echo "Keyboard Backlight Mode: Shifting"
			ecw $((0x17)) '\x04' # Shifting Mode
			ecw $((0x18)) '\x01' # Speed 1
			ecw $((0x1b)) '\x01' # Direction to Right
		elif [[ $2 =~ "5" ]]; then # Zoom Mode (Dynamic Keyboard Color need to be set)
			echo "Keyboard Backlight Mode: Zoom" 
			ecw $((0x17)) '\x05' # Zoom Mode
			ecw $((0x18)) '\x01' # Speed 1
		fi
	fi
	if [[ $* =~ "o" ]]; then
		if [[ $2 =~ "0" ]]; then # All Zone Keyboard Backlight Color
			if [ -z "$3" ]; then
				echo "Specify color hex code as Second arg"
			else
				echo "All Zone Keyboard Backlight Color Set"

				# Zone 1
				C1_1="$(echo "$3" | cut -b 1-2)"
				C1_2="$(echo "$3" | cut -b 3-4)"
				C1_3="$(echo "$3" | cut -b 5-6)"

				# Zone 2
				C2_1="$(echo "$3" | cut -b 1-2)"
				C2_2="$(echo "$3" | cut -b 3-4)"
				C2_3="$(echo "$3" | cut -b 5-6)"

				# Zone 3
				C3_1="$(echo "$3" | cut -b 1-2)"
				C3_2="$(echo "$3" | cut -b 3-4)"
				C3_3="$(echo "$3" | cut -b 5-6)"

				# Zone 4
				C4_1="$(echo "$3" | cut -b 1-2)"
				C4_2="$(echo "$3" | cut -b 3-4)"
				C4_3="$(echo "$3" | cut -b 5-6)"
			fi
		elif [[ $2 =~ "1" ]]; then # Per Zone Keyboard Backlight Color
			if [ -z "$3" ] | [ -z "$4" ] | [ -z "$5" ] | [ -z "$6" ]; then
				echo "Specify color hex code per zone (separated by whitespace)"
			else
				echo "Per Zone Keyboard Backlight Color Set"

				# Zone 1
				C1_1="$(echo "$3" | cut -b 1-2)"
				C1_2="$(echo "$3" | cut -b 3-4)"
				C1_3="$(echo "$3" | cut -b 5-6)"

				# Zone 2
				C2_1="$(echo "$4" | cut -b 1-2)"
				C2_2="$(echo "$4" | cut -b 3-4)"
				C2_3="$(echo "$4" | cut -b 5-6)"

				# Zone 3
				C3_1="$(echo "$5" | cut -b 1-2)"
				C3_2="$(echo "$5" | cut -b 3-4)"
				C3_3="$(echo "$5" | cut -b 5-6)"

				# Zone 4
				C4_1="$(echo "$6" | cut -b 1-2)"
				C4_2="$(echo "$6" | cut -b 3-4)"
				C4_3="$(echo "$6" | cut -b 5-6)"
			fi
		elif [[ $2 =~ "2" ]]; then # Dynamic Keyboard Backlight Color
			if [ -z "$3" ]; then
				echo "Specify color hex code for Dynamic Keyboard Mode"
			else
				echo "Dynamic Keyboard Backlight Color Set"

				C1_1="$(echo "$3" | cut -b 1-2)"
				C1_2="$(echo "$3" | cut -b 3-4)"
				C1_3="$(echo "$3" | cut -b 5-6)"

				ecw $((0x1c)) "\x$C1_1"
				ecw $((0x1d)) "\x$C1_2"
				ecw $((0x1e)) "\x$C1_3"
			fi
			exit
		fi

		# Zone 1
		ecw $((0x3c)) "\x$C1_1"
		ecw $((0x3d)) "\x$C1_2"
		ecw $((0x3e)) "\x$C1_3"
		
		# Zone 2
		ecw $((0x3f)) "\x$C2_1"
		ecw $((0x40)) "\x$C2_2"
		ecw $((0x41)) "\x$C2_3"

		# Zone 3
		ecw $((0x42)) "\x$C3_1"
		ecw $((0x43)) "\x$C3_2"
		ecw $((0x44)) "\x$C3_3"

		# Zone 4
		ecw $((0x45)) "\x$C4_1"
		ecw $((0x46)) "\x$C4_2"
		ecw $((0x47)) "\x$C4_3"
	fi
	if [[ $* =~ "u" ]]; then # Power-off USB Charging (Not tested)
		if [[ $2 =~ "0" ]]; then
			echo "Power-off USB Charging - OFF"
			POU="\x1f"
		elif [[ $2 =~ "1" ]]; then
			echo "Power-off USB Charging - ON"
			POU="\x0f"
		fi
		ecw $((0x8)) "$POU"
	fi
	if [[ $* =~ "v" ]]; then # LCD Overdrive (Test)
		if [[ $2 =~ "0" ]]; then
			echo "LCD Overdrive - OFF"
			LCD="\x10"
		elif [[ $2 =~ "1" ]]; then
			echo "LCD Overdrive - ON"
			LCD="\x18"
		fi
		ecw $((0x8)) "$LCD"
	fi
	if [[ $* =~ "t" ]]; then # Keyboard Backlight Timeout
		if [[ $2 =~ "0" ]]; then 
			echo "Keyboard Backlight Timeout - OFF"
			KBT="\x00"
		elif [[ $2 =~ "1" ]]; then 
			if [ -z "$3" ]; then
					echo "Specify timeout in sec (Max 65 sec)"
				elif [ $3 -le 65 ] && [ $3 -ge 1 ]; then
					echo "Keyboard Backlight Timeout - $3 sec"
					KBT="\x$(printf %x "$3")"

					# 70 buggy (Infinite - Time out off)
					# 66 Quick timeout .5 sec?
					# 68 3 sec
					# 69 3 sec
					# -1 58 sec
				else
					echo "Timeout must be less than 66 and bigger than 0"
			fi
		fi
		ecw $((0x06)) "$KBT"
	fi
	if [[ $* =~ "z" ]]; then # Get CPU and GPU Fan Speed
		echo CPU Fan: $((0x$(xxd -g1 -seek $((0x13)) -l 2 $EC | cut -b 11-16 | awk '{print $2$1}'))) RPM
		echo GPU Fan: $((0x$(xxd -g1 -seek $((0x15)) -l 2 $EC | cut -b 11-16 | awk '{print $2$1}'))) RPM
	fi
	if [[ $* =~ "y" ]]; then # Get CPU and GPU Temp
		echo CPU Temp: $((0x$(xxd -g1 -seek $((0xB0)) -l 1 $EC | cut -b 11-13))) °C
		echo CPU Temp: $((0x$(xxd -g1 -seek $((0xB9)) -l 1 $EC | cut -b 11-13))) °C
		echo GPU Temp: $((0x$(xxd -g1 -seek $((0xB4)) -l 1 $EC | cut -b 11-13))) °C
	fi
	if [[ $* =~ "w" ]]; then # Get Battery Status
		BAT=$(xxd -g1 -seek $((0x00)) -l 2 $EC | cut -b 11-13)
		if [[ $BAT =~ "1" ]]; then
			echo "AC Plugged in"
			CHG=$(xxd -g1 -seek $((0xC1)) -l 2 $EC | cut -b 11-13)
			if [[ $CHG =~ "00" ]]; then
				echo "Not Charging"
			elif [[ $CHG =~ "01" ]]; then
				echo "Drained"
			elif [[ $CHG =~ "02" ]]; then
				echo "Charging"
			fi
		elif [[ $BAT =~ "0" ]]; then
			echo "AC Disconnected"
		fi
	fi
fi
