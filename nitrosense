#!/bin/bash

if [ $# -le 0 ]; then
	echo "ENA: [w]rite to ec"
	echo "PWR: [q]uiet [d]efault [p]erformance"
	echo "FAN: [a]uto  [c]ustom  [m]ax"
	echo "DBG: [r]ead from ec"
	echo "DBG: [e]nergy data from intel_rapl"
	echo "DBG: [n]vidia-powerd restart"
	W=0
	exit
fi

echo on | tee /sys/module/msr/parameters/allow_writes &>/dev/null

# Reload ec_sys with write_support
 modprobe -r ec_sys
 modprobe ec_sys write_support=1

EC=/sys/kernel/debug/ec/ec0/io # EC Location
W=1

if [[ $* =~ "r" ]]; then
	if [[ $( ls $EC 2>/dev/null) ]]; then
		 xxd -g1 $EC
	fi
fi

if [[ $* =~ "e" ]]; then
	find /sys/devices/virtual/powercap -type f -iname "energy_uj" -print -exec bash -c " cat {}" \;
fi

function ecw() {
	# shellcheck disable=SC2059
	echo -n -e "$2" |  dd of=$EC bs=1 seek="$1" count=1 conv=notrunc &>/dev/null
}

function set_power_limits() {
	MSR=/sys/devices/virtual/powercap/intel-rapl/intel-rapl:0
	MCH=/sys/devices/virtual/powercap/intel-rapl-mmio/intel-rapl-mmio:0
	for N in "$MSR" "$MCH"; do
		echo "${1}000000" | tee "$N/constraint_0_power_limit_uw" &>/dev/null
		echo "${2}000000" | tee "$N/constraint_1_power_limit_uw" &>/dev/null
		echo "128000000"  | tee "$N/constraint_0_time_window_us" &>/dev/null
		echo "128000000"  | tee "$N/constraint_1_time_window_us" &>/dev/null
		[[ "$N" == "$MSR" ]] && NODE=MSR || NODE=MCH
		echo "[$NODE] PL1 [$(cat "$N/constraint_0_power_limit_uw") $(cat "$N/constraint_0_time_window_us")] PL2 [$(cat "$N/constraint_1_power_limit_uw") $(cat "$N/constraint_1_time_window_us")]"
	done
}

# ecw $((0x03)) '\x51' # Write-Enable? + Set Battery charge to 80%
# ecw $((0x03)) '\x11' # Write-Enable? + Set Battery charge to 100%

if [[ $( ls $EC 2>/dev/null) ]]; then
	if [[ $* =~ "b" ]]; then
		if [ -z "$2" ]; then
			echo "Specify Charging Limit Mode as Second arg (0 = Off, 1 = On)"
		else
			if [[ $2 =~ "0" ]]; then
				echo "Battery Charging Limit (80%) - OFF"
				BAT="\x11"
			elif [[ $2 =~ "1" ]]; then
				echo "Battery Charging Limit (80%) - ON"
				BAT="\x51"
			fi
			ecw $((0x03)) "$BAT" # 11 51: 80% 100% limit charge
		fi
	fi
	if [[ $* =~ "l" ]]; then
		if [ -z "$2" ]; then
			echo "Specify Charging Limit Mode as Second arg (0 = Off, 1 = On)"
		else
			if [[ $2 =~ "0" ]]; then
				echo "Keyboard Backlight - OFF"
				KBD="\x00"
			elif [[ $2 =~ "1" ]]; then
				echo "Keyboard Backlight - ON"
				KBD="\x64"
			fi
			ecw "25" "$KBD" # 00 64: 0% - 100% Keyboard backlight
		fi
	fi
	if [[ $* =~ "q" ]]; then
		echo "PWR - Quiet"
		ecw $((0x2c)) '\x00' # 00 01 04 PWR: quiet default perf
		ecw $((0x2d)) '\x04' # 04 05 PWR
		set_power_limits 10 15
	fi
	if [[ $* =~ "d" ]]; then
		echo "PWR - Default"
		ecw $((0x2c)) '\x01' # 00 01 04 PWR: quiet default perf
		ecw $((0x2d)) '\x04' # 04 05 PWR
		set_power_limits 45 75
	fi
	if [[ $* =~ "p" ]]; then
		echo "PWR - Performance"
		ecw $((0x2c)) '\x04' # 00 01 04 PWR: quiet default perf
		ecw $((0x2d)) '\x04' # 04 05 PWR
		set_power_limits 75 95
	fi
	if [[ $* =~ "n" ]]; then
		echo "PWR - nvidia-powerd restart"
		 systemctl restart nvidia-powerd
	fi
	if [[ $* =~ "a" ]]; then
		echo "FAN - Auto"
		ecw $((0x21)) '\x10' # 10 20 30 GPUF: auto max cust
		ecw $((0x22)) '\x04' # 04 08 0c CPUF: auto max cust
	fi
	if [[ $* =~ "c" ]]; then
		if [ -z "$2" ]; then
			echo "Specify FAN Percentage as Second arg (CPU FAN) and Third arg (GPU FAN)"
		else
			CPCT="\x$(printf %x "$2")"
			GPCT="\x$(printf %x "$3")"
			echo "CPU FAN - Custom ($2%)"
			echo "GPU FAN - Custom ($3%)"
			ecw $((0x21)) '\x30' # 10 20 30 GPUF: auto max cust
			ecw $((0x22)) '\x0c' # 04 08 0c CPUF: auto max cust
			ecw $((0x37)) "$CPCT" # 32 64 CPUF PCT: 0-100%
			ecw $((0x3a)) "$GPCT" # 32 64 GPUF PCT: 0-100%
		fi
	fi
	if [[ $* =~ "m" ]]; then
		echo "FAN - Max"
		ecw $((0x21)) '\x20' # 10 20 30 GPUF: auto max cust
		ecw $((0x22)) '\x08' # 04 08 0c CPUF: auto max cust
	fi
fi

#if [[ $W =~ "1"  && -f /sys/bus/wmi/drivers/acer-wmi-battery/health_mode ]]; then
#	echo 1 | tee /sys/bus/wmi/drivers/acer-wmi-battery/health_mode &>/dev/null
#fi
